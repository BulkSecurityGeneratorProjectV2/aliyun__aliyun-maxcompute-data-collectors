# Copyright 1999-2019 Alibaba Group Holding Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import os
import argparse

from proc_pool import ProcessPool

'''
   [output directory]
   |______Report.html
   |______[database name]
          |______odps_ddl
          |      |______tables
          |      |      |______[table name].sql
          |      |______partitions
          |             |______[table name].sql
          |______hive_udtf_sql
                 |______single_partition
                 |      |______[table name].sql
                 |______multi_partition
                        |______[table name].sql
'''

pool = ProcessPool(20, False)


def submit(cmd: str, log_dir: str, retry=5) -> None:
    pool.submit(command=cmd, log_dir=log_dir, retry=retry)


def main(root: str, odpscmd_path: str, odps_config_path: str, odps_ddl_log_root: str) -> None:
    databases = os.listdir(root)

    for database in databases:
        if database == "report.html":
            continue
        create_table_stmt_dir = os.path.join(
            root, database, "odps_ddl", "tables")
        add_partition_stmt_dir = os.path.join(
            root, database, "odps_ddl", "partitions")

        if os.path.exists(create_table_stmt_dir):
            create_table_stmt_files = os.listdir(create_table_stmt_dir)
            for create_table_stmt_file in create_table_stmt_files:
                file_path = os.path.join(
                    create_table_stmt_dir, create_table_stmt_file)
                command = "%s -f %s --config=%s" % (
                    odpscmd_path, file_path, odps_config_path)
                log_dir = os.path.join(odps_ddl_log_root, database, create_table_stmt_file[:-4])
                submit(command, log_dir=log_dir)

        if os.path.exists(add_partition_stmt_dir):
            add_partition_stmt_files = os.listdir(add_partition_stmt_dir)
            for add_partition_stmt_file in add_partition_stmt_files:
                file_path = os.path.join(
                    add_partition_stmt_dir, add_partition_stmt_file)
                command = "%s -f %s --config=%s" % (
                    odpscmd_path, file_path, odps_config_path)
                log_dir = os.path.join(odps_ddl_log_root, database, add_partition_stmt_file[: -4])
                submit(command, log_dir=log_dir)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Run ODPS DDL automatically.')
    parser.add_argument(
        "--input",
        required=True,
        help="path to directory generated by meta processor")
    parser.add_argument(
        "--odpscmd",
        required=False,
        help="path to odpscmd executable")
    args = parser.parse_args()

    root = args.input
    script_path = os.path.dirname(os.path.realpath(__file__))
    odps_data_carrier_path = os.path.dirname(script_path)
    odps_config_path = os.path.join(
        os.path.dirname(script_path), "odps_config.ini")
    odps_ddl_log_root = os.path.join(odps_data_carrier_path, "log", "odps_ddl")

    if args.odpscmd is None:
        # get path to odpscmd
        odpscmd_path = os.path.join(
            os.path.dirname(script_path), "res", "console", "bin", "odpscmd")
        if not os.path.exists(odpscmd_path):
            print("ERROR: cannot find odpscmd, please specify the path to odpscmd")
    else:
        odpscmd_path = args.odpscmd

    pool.start()
    main(root, odpscmd_path, odps_config_path, odps_ddl_log_root)
    pool.join_all()
    pool.stop()
