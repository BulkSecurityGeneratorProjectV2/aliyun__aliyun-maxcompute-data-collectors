# Copyright 1999-2019 Alibaba Group Holding Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import os
import subprocess
import traceback
import argparse

'''
   [output directory]
   |______Report.html
   |______[database name]
          |______odps_ddl
          |      |______tables
          |      |      |______[table name].sql
          |      |______partitions
          |             |______[table name].sql
          |______hive_udtf_sql
                 |______single_partition
                 |      |______[table name].sql
                 |______multi_partition
                        |______[table name].sql
'''


def execute(cmd: str, verbose=False) -> int:
  try:
    if (verbose):
      print("INFO: executing \'%s\'" % (cmd))

    sp = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE,
                          stderr=subprocess.PIPE, preexec_fn=os.setsid)
    sp.wait()

    if (verbose):
      stdout = sp.stdout.read().strip()
      stderr = sp.stderr.read().strip()
      print("DEBUG: stdout: " + str(stdout))
      print("DEBUG: stderr: " + str(stderr))
      print("DEBUG: returncode: " + str(sp.returncode))

    return sp.returncode
  except Exception as e:
    print("ERROR: execute \'%s\'' Failed: %s" % (cmd, e))
    print(traceback.format_exc())
    return 1


def main(root: str, odpscmd_path: str, odps_config_path: str) -> None:
  databases = os.listdir(root)

  for database in databases:
    if database == "report.html":
      continue
    create_table_stmt_dir = os.path.join(
        root, database, "odps_ddl", "tables")
    add_partition_stmt_dir = os.path.join(
        root, database, "odps_ddl", "partitions")

    if os.path.exists(create_table_stmt_dir):
      create_table_stmt_files = os.listdir(create_table_stmt_dir)
      for create_table_stmt_file in create_table_stmt_files:
        file_path = os.path.join(
            create_table_stmt_dir, create_table_stmt_file)
        retry = 5
        while retry > 0:
          returncode = execute("%s -f %s --config=%s" % (
            odpscmd_path, file_path, odps_config_path), verbose=True)
          if returncode == 0:
            break
          else:
            print("INFO: execute %s failed, retrying..." % file_path)
          retry -= 1

        if retry == 0:
          print("ERROR: execute %s  failed 5 times" % file_path)

    if os.path.exists(add_partition_stmt_dir):
      add_partition_stmt_files = os.listdir(add_partition_stmt_dir)
      for add_partition_stmt_file in add_partition_stmt_files:
        file_path = os.path.join(
            add_partition_stmt_dir, add_partition_stmt_file)
        retry = 5
        while retry > 0:
          returncode = execute("%s -f %s --config=%s" % (
            odpscmd_path, file_path, odps_config_path), verbose=True)
          if returncode == 0:
            break
          else:
            print("INFO: execute %s failed, retrying..." % file_path)
          retry -= 1

        if retry == 0:
          print("ERROR: execute %s failed 5 times" % file_path)


if __name__ == '__main__':
  parser = argparse.ArgumentParser(
      description='Run ODPS DDL automatically.')
  parser.add_argument(
      "--input",
      required=True,
      help="path to directory generated by meta processor")
  parser.add_argument(
      "--odpscmd",
      required=False,
      help="path to odpscmd executable")
  args = parser.parse_args()

  root = args.input
  script_path = os.path.dirname(os.path.realpath(__file__))
  odps_config_path = os.path.join(
      os.path.dirname(script_path), "odps_config.ini")

  if args.odpscmd is None:
    # get path to odpscmd
    odpscmd_path = os.path.join(
        os.path.dirname(script_path), "res", "console", "bin", "odpscmd")
    if not os.path.exists(odpscmd_path):
      print("ERROR: cannot find odpscmd, please specify the path to odpscmd")
  else:
    odpscmd_path = args.odpscmd

  main(root, odpscmd_path, odps_config_path)
