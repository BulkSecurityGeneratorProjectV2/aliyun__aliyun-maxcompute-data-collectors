# Copyright 1999-2019 Alibaba Group Holding Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import os
import argparse
import copy

from proc_pool import ProcessPool

'''
      [output directory]
      |______Report.html
      |______[database name]
             |______[table name]
                    |______odps_ddl
                    |      |______create_table.sql
                    |      |______create_partition_[partition spec].sql
                    |      |______...
                    |______hive_udtf_sql
                           |______single_partition
                           |      |______[partition spec].sql
                           |      |______...
                           |______multi_partition
                                  |______[table name].sql
'''


def submit(cmd: str, log_dir: str, context: dict, retry=5) -> None:
    pool.submit(command=cmd, log_dir=log_dir, context=context, retry=retry)


def print_red(s):
    print('\033[31m' + s + '\033[0m')


def print_yellow(s):
    print('\033[33m' + s + '\033[0m')


def print_green(s):
    print('\033[32m' + s + '\033[0m')


def on_submit(context: dict):
    msg = "MaxCompute DDL submitted, database: %s, table: %s" % (context["database"],
                                                                 context["table"])
    if "partition" in context:
        msg += ", partition: %s" % context["partition"]
    print_yellow(msg)


def on_success(context: dict):
    msg = "MaxCompute DDL finished, database: %s, table: %s" % (context["database"],
                                                                 context["table"])
    if "partition" in context:
        msg += ", partition: %s" % context["partition"]
    print_green(msg)


def main(root: str, odpscmd_path: str, odps_config_path: str, odps_ddl_log_root: str) -> None:
    databases = os.listdir(root)

    context = {}
    context["type"] = "odps"
    context["on_submit_callback"] = on_submit
    context["on_success_callback"] = on_success

    for database in databases:
        context["database"] = database
        database_dir = os.path.join(root, database)
        if not os.path.isdir(database_dir):
            continue

        tables = os.listdir(database_dir)
        for table in tables:
            context["table"] = table
            # create table
            log_dir = os.path.join(odps_ddl_log_root, database, table)
            odps_ddl_dir = os.path.join(database_dir, table, "odps_ddl")
            create_table_sql_file_path = os.path.join(odps_ddl_dir,"create_table.sql")
            command = "%s -f %s --config=%s" % (odpscmd_path,
                                                create_table_sql_file_path,
                                                odps_config_path)
            submit(command, log_dir=log_dir, context=copy.deepcopy(context))

            # create partitions
            sql_files = os.listdir(odps_ddl_dir)
            for sql_file in sql_files:
                context["partition"] = sql_file[: -4]
                if sql_file == "create_table.sql":
                    continue
                sql_file_path = os.path.join(odps_ddl_dir, sql_file)
                command = "%s -f %s --config=%s" % (odpscmd_path,
                                                    sql_file_path,
                                                    odps_config_path)
                submit(command, log_dir=log_dir, context=copy.deepcopy(context))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Run ODPS DDL automatically.')
    parser.add_argument(
        "--input",
        required=True,
        help="path to directory generated by meta processor")
    parser.add_argument(
        "--odpscmd",
        required=False,
        help="path to odpscmd executable")
    parser.add_argument(
        "--parallelism",
        required=False,
        default=5,
        type=int,
        help="max parallelism of running hive sql")
    parser.add_argument(
        "--verbose",
        required=False,
        default=False,
        type=bool,
        help="print detailed information")

    args = parser.parse_args()

    root = args.input
    script_path = os.path.dirname(os.path.realpath(__file__))
    odps_data_carrier_path = os.path.dirname(script_path)
    odps_config_path = os.path.join(
        os.path.dirname(script_path), "odps_config.ini")
    odps_ddl_log_root = os.path.join(odps_data_carrier_path, "log", "odps_ddl")

    if args.odpscmd is None:
        # get path to odpscmd
        odpscmd_path = os.path.join(odps_data_carrier_path, "res", "console", "bin", "odpscmd")
        if not os.path.exists(odpscmd_path):
            print("ERROR: cannot find odpscmd, please specify the path to odpscmd")
    else:
        odpscmd_path = args.odpscmd

    pool = ProcessPool(args.parallelism, args.verbose)
    pool.start()
    try:
        main(root, odpscmd_path, odps_config_path, odps_ddl_log_root)
    finally:
        pool.join_all()
        pool.stop()
